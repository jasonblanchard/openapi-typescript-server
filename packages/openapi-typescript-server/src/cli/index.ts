#!/usr/bin/env node

import { Command } from "commander";
import fs from "fs";
import { OpenAPISpec } from "openapi-typescript-server-runtime";
import yaml from "js-yaml";
import generate from "./generate.ts";
import c from "ansi-colors";
import supportsColor from "supports-color";
import packageJson from "../../package.json" with { type: "json" };

const program = new Command();

if (!supportsColor.stdout || supportsColor.stdout.hasBasic === false) {
  c.enabled = false;
}

program
  .name("openapi-typescript-server")
  .description("CLI to generate Open API server stub")
  .version(packageJson.version)
  .argument("<spec>", "Path to Open API spec file")
  .description("Output generated code")
  .option(
    "-t, --types <types>",
    "Import path (relative to generated output) for type schema generated by open-api-typescript",
  )
  .option("-o, --output <dir>", "output directory", "")
  .action(async (spec, options) => {
    let specS = "";
    try {
      specS = fs.readFileSync(spec, "utf-8");
    } catch (e) {
      console.error("Error reading spec file", (e as Error).message);
      process.exit(1);
    }

    const specPojo = yaml.load(specS) as Map<string, any>;

    const validateSpecResponse = OpenAPISpec.safeParse(specPojo);

    if (!validateSpecResponse.success) {
      console.error(validateSpecResponse.error.issues);
      return;
    }

    const sourceFile = generate(
      validateSpecResponse.data,
      options.types,
      options.output,
      packageJson.version,
    );

    if (options.output) {
      console.log(
        `ðŸ¤– ${c.bold("openapi-typescript-server")} ${c.dim(packageJson.version)} ${c.green(spec)} â†’ ${c.green(c.bold(options.output))}`,
      );
      sourceFile.saveSync();
      return;
    }

    console.log(sourceFile.print());
  });

program.parse();
