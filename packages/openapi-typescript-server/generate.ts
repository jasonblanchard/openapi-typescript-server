import type { OpenAPISpec } from "./openapiValidator";
import { Project } from "ts-morph";

export default function generate(
  spec: OpenAPISpec,
  types: string,
  outdir: string
) {
  const project = new Project();

  const sourceFile = project.createSourceFile(`${outdir}/server.ts`, "", {
    overwrite: true,
  });

  sourceFile.addImportDeclaration({
    namedImports: ["operations"],
    moduleSpecifier: types,
    isTypeOnly: true,
  });

  sourceFile.addImportDeclaration({
    namedImports: ["Route"],
    moduleSpecifier: "openapi-typescript-server/routeHandler",
    isTypeOnly: true,
  });

  //   TODO: For each path
  //  - for each method/operation

  const args = sourceFile.addInterface({
    name: "GetPetByIdArgs",
    isExported: true,
    typeParameters: [{ name: "Req" }, { name: "Res" }],
    properties: [
      {
        name: "parameters",
        type: "operations['getPetById']['parameters']",
      },
      {
        name: "requestBody",
        type: "operations['getPetById']['requestBody']",
      },
      {
        name: "req",
        type: "Req",
      },
      {
        name: "res",
        type: "Res",
      },
    ],
  });

  const response200 = sourceFile.addInterface({
    name: "GetPetByIdResponse200",
    properties: [
      {
        name: "responseType",
        type: "'200'",
      },
      {
        name: "content",
        type: "operations['getPetById']['responses']['200']['content']",
      },
      {
        name: "headers",
        type: "{ [name: string]: any }",
        hasQuestionToken: true,
      },
    ],
  });

  const responseDefulat = sourceFile.addInterface({
    name: "GetPetByIdResponsedefault",
    properties: [
      {
        name: "responseType",
        type: "'default'",
      },
      {
        name: "content",
        type: "operations['getPetById']['responses']['default']['content']",
      },
      {
        name: "headers",
        type: "{ [name: string]: any }",
        hasQuestionToken: true,
      },
      {
        name: "status",
        type: "number",
      },
    ],
  });

  const response = sourceFile.addTypeAlias({
    name: "GetPetByIdResponse",
    isExported: true,
    type: `Promise<${response200.getName()} | ${responseDefulat.getName()}>`,
  });

  //   TODO: End for each

  const serverInterface = sourceFile.addInterface({
    name: "Server",
    isExported: true,
    typeParameters: [
      { name: "Req", default: "unknown" },
      { name: "Res", default: "unknown" },
    ],
    properties: [
      {
        name: "getPetById",
        type: `(
            args: ${args.getName()}<Req, Res>
            ) => ${response.getName()}`,
      },
    ],
  });

  sourceFile.addFunction({
    name: "registerHandlers",
    isExported: true,
    parameters: [{ name: "server", type: serverInterface.getName() }],
    returnType: "Route[]",
    statements: (writer) => {
      writer.writeLine("return [");

      // TODO: For each operation
      writer.writeLine("{");
      writer.writeLine('method: "get",');
      writer.writeLine('path: "/pet/{petId}",');
      writer.writeLine("handler: server.getPetById,");
      writer.writeLine("}");

      writer.writeLine("]");
    },
  });

  sourceFile.insertText(
    0,
    `/**
 * This file was auto-generated by openapi-typescript-server.
 * Do not make direct changes to the file.
 */

  `
  );

  sourceFile.formatText({
    indentMultiLineObjectLiteralBeginningOnBlankLine: true,
    ensureNewLineAtEndOfFile: true,
    indentSize: 2,
  });
  sourceFile.saveSync();
}
