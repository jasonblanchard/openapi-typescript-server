/**
 * This file was auto-generated by openapi-typescript-server@0.0.6.
 * Do not make direct changes to the file.
 */

import type { paths } from "./schema.d.ts";
import type { Route } from "openapi-typescript-server-runtime";
import { NotImplementedError } from "openapi-typescript-server-runtime";

export interface ListPetsArgs<Req, Res> {
  parameters: paths['/pets']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface ListPetsResult200 {
  content: { 200: paths['/pets']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface ListPetsResultDefault {
  content: { default: paths['/pets']['get']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type ListPetsResult = Promise<ListPetsResult200 | ListPetsResultDefault>;

export async function listPetsUnimplemented(): ListPetsResult {
  throw new NotImplementedError()
}

export interface GetPetByIdArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface GetPetByIdResult200 {
  content: { 200: paths['/pet/{petId}']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface GetPetByIdResultDefault {
  content: { default: paths['/pet/{petId}']['get']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type GetPetByIdResult = Promise<GetPetByIdResult200 | GetPetByIdResultDefault>;

export async function getPetByIdUnimplemented(): GetPetByIdResult {
  throw new NotImplementedError()
}

export interface UpdatePetWithFormArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content: paths['/pet/{petId}']['post']['requestBody']['content']['application/json']
  }
  | {
    mediaType: "application/xml";
    content: paths['/pet/{petId}']['post']['requestBody']['content']['application/xml']
  }
  | {
    mediaType: "application/x-www-form-urlencoded";
    content: paths['/pet/{petId}']['post']['requestBody']['content']['application/x-www-form-urlencoded']
  }
  ;
}

interface UpdatePetWithFormResult200 {
  content: { 200: paths['/pet/{petId}']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface UpdatePetWithFormResultDefault {
  content: { default: paths['/pet/{petId}']['post']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type UpdatePetWithFormResult = Promise<UpdatePetWithFormResult200 | UpdatePetWithFormResultDefault>;

export async function updatePetWithFormUnimplemented(): UpdatePetWithFormResult {
  throw new NotImplementedError()
}

export interface MixedContentTypesArgs<Req, Res> {
  parameters: paths['/pet/{petId}/mixed-content-types']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content: paths['/pet/{petId}/mixed-content-types']['post']['requestBody']['content']['application/json']
  }
  | {
    mediaType: "application/xml";
    content: paths['/pet/{petId}/mixed-content-types']['post']['requestBody']['content']['application/xml']
  }
  ;
}

interface MixedContentTypesResult200 {
  content: { 200: paths['/pet/{petId}/mixed-content-types']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface MixedContentTypesResultDefault {
  content: { default: paths['/pet/{petId}/mixed-content-types']['post']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type MixedContentTypesResult = Promise<MixedContentTypesResult200 | MixedContentTypesResultDefault>;

export async function mixedContentTypesUnimplemented(): MixedContentTypesResult {
  throw new NotImplementedError()
}

export interface GetPetImageArgs<Req, Res> {
  parameters: paths['/pet/{petId}/image']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface GetPetImageResult200 {
  content: { 200: paths['/pet/{petId}/image']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

export type GetPetImageResult = Promise<GetPetImageResult200>;

export async function getPetImageUnimplemented(): GetPetImageResult {
  throw new NotImplementedError()
}

export interface GetPetWebpageArgs<Req, Res> {
  parameters: paths['/pet/{petId}/webpage']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface GetPetWebpageResult200 {
  content: { 200: paths['/pet/{petId}/webpage']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

export type GetPetWebpageResult = Promise<GetPetWebpageResult200>;

export async function getPetWebpageUnimplemented(): GetPetWebpageResult {
  throw new NotImplementedError()
}

export interface Server<Req = unknown, Res = unknown> {
  /** Returns all pets from the system that the user has access to */
  listPets: (
    args: ListPetsArgs<Req, Res>
  ) => ListPetsResult;
  getPetById: (
    args: GetPetByIdArgs<Req, Res>
  ) => GetPetByIdResult;
  updatePetWithForm: (
    args: UpdatePetWithFormArgs<Req, Res>
  ) => UpdatePetWithFormResult;
  mixedContentTypes: (
    args: MixedContentTypesArgs<Req, Res>
  ) => MixedContentTypesResult;
  getPetImage: (
    args: GetPetImageArgs<Req, Res>
  ) => GetPetImageResult;
  getPetWebpage: (
    args: GetPetWebpageArgs<Req, Res>
  ) => GetPetWebpageResult;
}

export function registerRouteHandlers<Req, Res>(server: Server<Req, Res>): Route[] {
  return [
    {
      method: "get",
      path: "/pets",
      handler: server.listPets as Route["handler"],
    },
    {
      method: "get",
      path: "/pet/{petId}",
      handler: server.getPetById as Route["handler"],
    },
    {
      method: "post",
      path: "/pet/{petId}",
      handler: server.updatePetWithForm as Route["handler"],
    },
    {
      method: "post",
      path: "/pet/{petId}/mixed-content-types",
      handler: server.mixedContentTypes as Route["handler"],
    },
    {
      method: "get",
      path: "/pet/{petId}/image",
      handler: server.getPetImage as Route["handler"],
    },
    {
      method: "get",
      path: "/pet/{petId}/webpage",
      handler: server.getPetWebpage as Route["handler"],
    },
  ]
}
