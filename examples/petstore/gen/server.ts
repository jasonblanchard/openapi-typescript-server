/**
 * This file was auto-generated by openapi-typescript-server.
 * Do not make direct changes to the file.
 */

import type { operations } from "./schema.d.ts";
import type { Route } from "openapi-typescript-server/route";

export interface UpdatePetArgs<Req, Res> {
  parameters: operations['updatePet']['parameters'];
  requestBody: operations['updatePet']['requestBody'];
  req: Req;
  res: Res;
}

interface UpdatePetResponse200 {
  responseType: '200';
  content: operations['updatePet']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface UpdatePetResponse400 {
  responseType: '400';
  content: operations['updatePet']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

interface UpdatePetResponse404 {
  responseType: '404';
  content: operations['updatePet']['responses']['404']['content'];
  headers?: { [name: string]: any };
}

interface UpdatePetResponse405 {
  responseType: '405';
  content: operations['updatePet']['responses']['405']['content'];
  headers?: { [name: string]: any };
}

export type UpdatePetResult = Promise<UpdatePetResponse200 | UpdatePetResponse400 | UpdatePetResponse404 | UpdatePetResponse405>;

export interface AddPetArgs<Req, Res> {
  parameters: operations['addPet']['parameters'];
  requestBody: operations['addPet']['requestBody'];
  req: Req;
  res: Res;
}

interface AddPetResponse200 {
  responseType: '200';
  content: operations['addPet']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface AddPetResponse405 {
  responseType: '405';
  content: operations['addPet']['responses']['405']['content'];
  headers?: { [name: string]: any };
}

export type AddPetResult = Promise<AddPetResponse200 | AddPetResponse405>;

export interface FindPetsByStatusArgs<Req, Res> {
  parameters: operations['findPetsByStatus']['parameters'];
  requestBody: operations['findPetsByStatus']['requestBody'];
  req: Req;
  res: Res;
}

interface FindPetsByStatusResponse200 {
  responseType: '200';
  content: operations['findPetsByStatus']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface FindPetsByStatusResponse400 {
  responseType: '400';
  content: operations['findPetsByStatus']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

export type FindPetsByStatusResult = Promise<FindPetsByStatusResponse200 | FindPetsByStatusResponse400>;

export interface FindPetsByTagsArgs<Req, Res> {
  parameters: operations['findPetsByTags']['parameters'];
  requestBody: operations['findPetsByTags']['requestBody'];
  req: Req;
  res: Res;
}

interface FindPetsByTagsResponse200 {
  responseType: '200';
  content: operations['findPetsByTags']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface FindPetsByTagsResponse400 {
  responseType: '400';
  content: operations['findPetsByTags']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

export type FindPetsByTagsResult = Promise<FindPetsByTagsResponse200 | FindPetsByTagsResponse400>;

export interface GetPetByIdArgs<Req, Res> {
  parameters: operations['getPetById']['parameters'];
  requestBody: operations['getPetById']['requestBody'];
  req: Req;
  res: Res;
}

interface GetPetByIdResponse200 {
  responseType: '200';
  content: operations['getPetById']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface GetPetByIdResponse400 {
  responseType: '400';
  content: operations['getPetById']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

interface GetPetByIdResponse404 {
  responseType: '404';
  content: operations['getPetById']['responses']['404']['content'];
  headers?: { [name: string]: any };
}

export type GetPetByIdResult = Promise<GetPetByIdResponse200 | GetPetByIdResponse400 | GetPetByIdResponse404>;

export interface UpdatePetWithFormArgs<Req, Res> {
  parameters: operations['updatePetWithForm']['parameters'];
  requestBody: operations['updatePetWithForm']['requestBody'];
  req: Req;
  res: Res;
}

interface UpdatePetWithFormResponse405 {
  responseType: '405';
  content: operations['updatePetWithForm']['responses']['405']['content'];
  headers?: { [name: string]: any };
}

export type UpdatePetWithFormResult = Promise<UpdatePetWithFormResponse405>;

export interface DeletePetArgs<Req, Res> {
  parameters: operations['deletePet']['parameters'];
  requestBody: operations['deletePet']['requestBody'];
  req: Req;
  res: Res;
}

interface DeletePetResponse400 {
  responseType: '400';
  content: operations['deletePet']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

export type DeletePetResult = Promise<DeletePetResponse400>;

export interface UploadFileArgs<Req, Res> {
  parameters: operations['uploadFile']['parameters'];
  requestBody: operations['uploadFile']['requestBody'];
  req: Req;
  res: Res;
}

interface UploadFileResponse200 {
  responseType: '200';
  content: operations['uploadFile']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

export type UploadFileResult = Promise<UploadFileResponse200>;

export interface GetInventoryArgs<Req, Res> {
  parameters: operations['getInventory']['parameters'];
  requestBody: operations['getInventory']['requestBody'];
  req: Req;
  res: Res;
}

interface GetInventoryResponse200 {
  responseType: '200';
  content: operations['getInventory']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

export type GetInventoryResult = Promise<GetInventoryResponse200>;

export interface PlaceOrderArgs<Req, Res> {
  parameters: operations['placeOrder']['parameters'];
  requestBody: operations['placeOrder']['requestBody'];
  req: Req;
  res: Res;
}

interface PlaceOrderResponse200 {
  responseType: '200';
  content: operations['placeOrder']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface PlaceOrderResponse405 {
  responseType: '405';
  content: operations['placeOrder']['responses']['405']['content'];
  headers?: { [name: string]: any };
}

export type PlaceOrderResult = Promise<PlaceOrderResponse200 | PlaceOrderResponse405>;

export interface GetOrderByIdArgs<Req, Res> {
  parameters: operations['getOrderById']['parameters'];
  requestBody: operations['getOrderById']['requestBody'];
  req: Req;
  res: Res;
}

interface GetOrderByIdResponse200 {
  responseType: '200';
  content: operations['getOrderById']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface GetOrderByIdResponse400 {
  responseType: '400';
  content: operations['getOrderById']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

interface GetOrderByIdResponse404 {
  responseType: '404';
  content: operations['getOrderById']['responses']['404']['content'];
  headers?: { [name: string]: any };
}

export type GetOrderByIdResult = Promise<GetOrderByIdResponse200 | GetOrderByIdResponse400 | GetOrderByIdResponse404>;

export interface DeleteOrderArgs<Req, Res> {
  parameters: operations['deleteOrder']['parameters'];
  requestBody: operations['deleteOrder']['requestBody'];
  req: Req;
  res: Res;
}

interface DeleteOrderResponse400 {
  responseType: '400';
  content: operations['deleteOrder']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

interface DeleteOrderResponse404 {
  responseType: '404';
  content: operations['deleteOrder']['responses']['404']['content'];
  headers?: { [name: string]: any };
}

export type DeleteOrderResult = Promise<DeleteOrderResponse400 | DeleteOrderResponse404>;

export interface CreateUserArgs<Req, Res> {
  parameters: operations['createUser']['parameters'];
  requestBody: operations['createUser']['requestBody'];
  req: Req;
  res: Res;
}

interface CreateUserResponsedefault {
  responseType: 'default';
  content: operations['createUser']['responses']['default']['content'];
  headers?: { [name: string]: any };
}

export type CreateUserResult = Promise<CreateUserResponsedefault>;

export interface CreateUsersWithListInputArgs<Req, Res> {
  parameters: operations['createUsersWithListInput']['parameters'];
  requestBody: operations['createUsersWithListInput']['requestBody'];
  req: Req;
  res: Res;
}

interface CreateUsersWithListInputResponse200 {
  responseType: '200';
  content: operations['createUsersWithListInput']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface CreateUsersWithListInputResponsedefault {
  responseType: 'default';
  content: operations['createUsersWithListInput']['responses']['default']['content'];
  headers?: { [name: string]: any };
}

export type CreateUsersWithListInputResult = Promise<CreateUsersWithListInputResponse200 | CreateUsersWithListInputResponsedefault>;

export interface LoginUserArgs<Req, Res> {
  parameters: operations['loginUser']['parameters'];
  requestBody: operations['loginUser']['requestBody'];
  req: Req;
  res: Res;
}

interface LoginUserResponse200 {
  responseType: '200';
  content: operations['loginUser']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface LoginUserResponse400 {
  responseType: '400';
  content: operations['loginUser']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

export type LoginUserResult = Promise<LoginUserResponse200 | LoginUserResponse400>;

export interface LogoutUserArgs<Req, Res> {
  parameters: operations['logoutUser']['parameters'];
  requestBody: operations['logoutUser']['requestBody'];
  req: Req;
  res: Res;
}

interface LogoutUserResponsedefault {
  responseType: 'default';
  content: operations['logoutUser']['responses']['default']['content'];
  headers?: { [name: string]: any };
}

export type LogoutUserResult = Promise<LogoutUserResponsedefault>;

export interface GetUserByNameArgs<Req, Res> {
  parameters: operations['getUserByName']['parameters'];
  requestBody: operations['getUserByName']['requestBody'];
  req: Req;
  res: Res;
}

interface GetUserByNameResponse200 {
  responseType: '200';
  content: operations['getUserByName']['responses']['200']['content'];
  headers?: { [name: string]: any };
}

interface GetUserByNameResponse400 {
  responseType: '400';
  content: operations['getUserByName']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

interface GetUserByNameResponse404 {
  responseType: '404';
  content: operations['getUserByName']['responses']['404']['content'];
  headers?: { [name: string]: any };
}

export type GetUserByNameResult = Promise<GetUserByNameResponse200 | GetUserByNameResponse400 | GetUserByNameResponse404>;

export interface UpdateUserArgs<Req, Res> {
  parameters: operations['updateUser']['parameters'];
  requestBody: operations['updateUser']['requestBody'];
  req: Req;
  res: Res;
}

interface UpdateUserResponsedefault {
  responseType: 'default';
  content: operations['updateUser']['responses']['default']['content'];
  headers?: { [name: string]: any };
}

export type UpdateUserResult = Promise<UpdateUserResponsedefault>;

export interface DeleteUserArgs<Req, Res> {
  parameters: operations['deleteUser']['parameters'];
  requestBody: operations['deleteUser']['requestBody'];
  req: Req;
  res: Res;
}

interface DeleteUserResponse400 {
  responseType: '400';
  content: operations['deleteUser']['responses']['400']['content'];
  headers?: { [name: string]: any };
}

interface DeleteUserResponse404 {
  responseType: '404';
  content: operations['deleteUser']['responses']['404']['content'];
  headers?: { [name: string]: any };
}

export type DeleteUserResult = Promise<DeleteUserResponse400 | DeleteUserResponse404>;

export interface Server<Req = unknown, Res = unknown> {
  updatePet: (
    args: UpdatePetArgs<Req, Res>
  ) => UpdatePetResult;
  addPet: (
    args: AddPetArgs<Req, Res>
  ) => AddPetResult;
  findPetsByStatus: (
    args: FindPetsByStatusArgs<Req, Res>
  ) => FindPetsByStatusResult;
  findPetsByTags: (
    args: FindPetsByTagsArgs<Req, Res>
  ) => FindPetsByTagsResult;
  getPetById: (
    args: GetPetByIdArgs<Req, Res>
  ) => GetPetByIdResult;
  updatePetWithForm: (
    args: UpdatePetWithFormArgs<Req, Res>
  ) => UpdatePetWithFormResult;
  deletePet: (
    args: DeletePetArgs<Req, Res>
  ) => DeletePetResult;
  uploadFile: (
    args: UploadFileArgs<Req, Res>
  ) => UploadFileResult;
  getInventory: (
    args: GetInventoryArgs<Req, Res>
  ) => GetInventoryResult;
  placeOrder: (
    args: PlaceOrderArgs<Req, Res>
  ) => PlaceOrderResult;
  getOrderById: (
    args: GetOrderByIdArgs<Req, Res>
  ) => GetOrderByIdResult;
  deleteOrder: (
    args: DeleteOrderArgs<Req, Res>
  ) => DeleteOrderResult;
  createUser: (
    args: CreateUserArgs<Req, Res>
  ) => CreateUserResult;
  createUsersWithListInput: (
    args: CreateUsersWithListInputArgs<Req, Res>
  ) => CreateUsersWithListInputResult;
  loginUser: (
    args: LoginUserArgs<Req, Res>
  ) => LoginUserResult;
  logoutUser: (
    args: LogoutUserArgs<Req, Res>
  ) => LogoutUserResult;
  getUserByName: (
    args: GetUserByNameArgs<Req, Res>
  ) => GetUserByNameResult;
  updateUser: (
    args: UpdateUserArgs<Req, Res>
  ) => UpdateUserResult;
  deleteUser: (
    args: DeleteUserArgs<Req, Res>
  ) => DeleteUserResult;
}

export function registerServerHandlers(server: Server): Route[] {
  return [
    {
      method: "put",
      path: "/pet",
      handler: server.updatePet,
    },
    {
      method: "post",
      path: "/pet",
      handler: server.addPet,
    },
    {
      method: "get",
      path: "/pet/findByStatus",
      handler: server.findPetsByStatus,
    },
    {
      method: "get",
      path: "/pet/findByTags",
      handler: server.findPetsByTags,
    },
    {
      method: "get",
      path: "/pet/{petId}",
      handler: server.getPetById,
    },
    {
      method: "post",
      path: "/pet/{petId}",
      handler: server.updatePetWithForm,
    },
    {
      method: "delete",
      path: "/pet/{petId}",
      handler: server.deletePet,
    },
    {
      method: "post",
      path: "/pet/{petId}/uploadImage",
      handler: server.uploadFile,
    },
    {
      method: "get",
      path: "/store/inventory",
      handler: server.getInventory,
    },
    {
      method: "post",
      path: "/store/order",
      handler: server.placeOrder,
    },
    {
      method: "get",
      path: "/store/order/{orderId}",
      handler: server.getOrderById,
    },
    {
      method: "delete",
      path: "/store/order/{orderId}",
      handler: server.deleteOrder,
    },
    {
      method: "post",
      path: "/user",
      handler: server.createUser,
    },
    {
      method: "post",
      path: "/user/createWithList",
      handler: server.createUsersWithListInput,
    },
    {
      method: "get",
      path: "/user/login",
      handler: server.loginUser,
    },
    {
      method: "get",
      path: "/user/logout",
      handler: server.logoutUser,
    },
    {
      method: "get",
      path: "/user/{username}",
      handler: server.getUserByName,
    },
    {
      method: "put",
      path: "/user/{username}",
      handler: server.updateUser,
    },
    {
      method: "delete",
      path: "/user/{username}",
      handler: server.deleteUser,
    },
  ]
}
