/**
 * This file was auto-generated by openapi-typescript-server.
 * Do not make direct changes to the file.
 */

import type { paths } from "./schema.d.ts";
import type { Route } from "openapi-typescript-server";
import { NotImplementedError } from "openapi-typescript-server";

export interface UpdatePetArgs<Req, Res> {
  parameters: paths['/pet']['put']['parameters'];
  requestBody: paths['/pet']['put']['requestBody'];
  req: Req;
  res: Res;
}

interface UpdatePetResult_200 {
  content: { 200: paths['/pet']['put']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface UpdatePetResult_400 {
  content: { 400: paths['/pet']['put']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface UpdatePetResult_404 {
  content: { 404: paths['/pet']['put']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

interface UpdatePetResult_405 {
  content: { 405: paths['/pet']['put']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type UpdatePetResult = Promise<UpdatePetResult_200 | UpdatePetResult_400 | UpdatePetResult_404 | UpdatePetResult_405>;

export async function updatePet_unimplemented(): UpdatePetResult {
  throw new NotImplementedError()
}

export interface AddPetArgs<Req, Res> {
  parameters: paths['/pet']['post']['parameters'];
  requestBody: paths['/pet']['post']['requestBody'];
  req: Req;
  res: Res;
}

interface AddPetResult_200 {
  content: { 200: paths['/pet']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface AddPetResult_405 {
  content: { 405: paths['/pet']['post']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type AddPetResult = Promise<AddPetResult_200 | AddPetResult_405>;

export async function addPet_unimplemented(): AddPetResult {
  throw new NotImplementedError()
}

export interface FindPetsByStatusArgs<Req, Res> {
  parameters: paths['/pet/findByStatus']['get']['parameters'];
  requestBody: paths['/pet/findByStatus']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface FindPetsByStatusResult_200 {
  content: { 200: paths['/pet/findByStatus']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface FindPetsByStatusResult_400 {
  content: { 400: paths['/pet/findByStatus']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type FindPetsByStatusResult = Promise<FindPetsByStatusResult_200 | FindPetsByStatusResult_400>;

export async function findPetsByStatus_unimplemented(): FindPetsByStatusResult {
  throw new NotImplementedError()
}

export interface FindPetsByTagsArgs<Req, Res> {
  parameters: paths['/pet/findByTags']['get']['parameters'];
  requestBody: paths['/pet/findByTags']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface FindPetsByTagsResult_200 {
  content: { 200: paths['/pet/findByTags']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface FindPetsByTagsResult_400 {
  content: { 400: paths['/pet/findByTags']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type FindPetsByTagsResult = Promise<FindPetsByTagsResult_200 | FindPetsByTagsResult_400>;

export async function findPetsByTags_unimplemented(): FindPetsByTagsResult {
  throw new NotImplementedError()
}

export interface GetPetByIdArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['get']['parameters'];
  requestBody: paths['/pet/{petId}']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface GetPetByIdResult_200 {
  content: { 200: paths['/pet/{petId}']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface GetPetByIdResult_400 {
  content: { 400: paths['/pet/{petId}']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface GetPetByIdResult_404 {
  content: { 404: paths['/pet/{petId}']['get']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type GetPetByIdResult = Promise<GetPetByIdResult_200 | GetPetByIdResult_400 | GetPetByIdResult_404>;

export async function getPetById_unimplemented(): GetPetByIdResult {
  throw new NotImplementedError()
}

export interface UpdatePetWithFormArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['post']['parameters'];
  requestBody: paths['/pet/{petId}']['post']['requestBody'];
  req: Req;
  res: Res;
}

interface UpdatePetWithFormResult_405 {
  content: { 405: paths['/pet/{petId}']['post']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type UpdatePetWithFormResult = Promise<UpdatePetWithFormResult_405>;

export async function updatePetWithForm_unimplemented(): UpdatePetWithFormResult {
  throw new NotImplementedError()
}

export interface DeletePetArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['delete']['parameters'];
  requestBody: paths['/pet/{petId}']['delete']['requestBody'];
  req: Req;
  res: Res;
}

interface DeletePetResult_400 {
  content: { 400: paths['/pet/{petId}']['delete']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type DeletePetResult = Promise<DeletePetResult_400>;

export async function deletePet_unimplemented(): DeletePetResult {
  throw new NotImplementedError()
}

export interface UploadFileArgs<Req, Res> {
  parameters: paths['/pet/{petId}/uploadImage']['post']['parameters'];
  requestBody: paths['/pet/{petId}/uploadImage']['post']['requestBody'];
  req: Req;
  res: Res;
}

interface UploadFileResult_200 {
  content: { 200: paths['/pet/{petId}/uploadImage']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

export type UploadFileResult = Promise<UploadFileResult_200>;

export async function uploadFile_unimplemented(): UploadFileResult {
  throw new NotImplementedError()
}

export interface GetInventoryArgs<Req, Res> {
  parameters: paths['/store/inventory']['get']['parameters'];
  requestBody: paths['/store/inventory']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface GetInventoryResult_200 {
  content: { 200: paths['/store/inventory']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

export type GetInventoryResult = Promise<GetInventoryResult_200>;

export async function getInventory_unimplemented(): GetInventoryResult {
  throw new NotImplementedError()
}

export interface PlaceOrderArgs<Req, Res> {
  parameters: paths['/store/order']['post']['parameters'];
  requestBody: paths['/store/order']['post']['requestBody'];
  req: Req;
  res: Res;
}

interface PlaceOrderResult_200 {
  content: { 200: paths['/store/order']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface PlaceOrderResult_405 {
  content: { 405: paths['/store/order']['post']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type PlaceOrderResult = Promise<PlaceOrderResult_200 | PlaceOrderResult_405>;

export async function placeOrder_unimplemented(): PlaceOrderResult {
  throw new NotImplementedError()
}

export interface GetOrderByIdArgs<Req, Res> {
  parameters: paths['/store/order/{orderId}']['get']['parameters'];
  requestBody: paths['/store/order/{orderId}']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface GetOrderByIdResult_200 {
  content: { 200: paths['/store/order/{orderId}']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface GetOrderByIdResult_400 {
  content: { 400: paths['/store/order/{orderId}']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface GetOrderByIdResult_404 {
  content: { 404: paths['/store/order/{orderId}']['get']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type GetOrderByIdResult = Promise<GetOrderByIdResult_200 | GetOrderByIdResult_400 | GetOrderByIdResult_404>;

export async function getOrderById_unimplemented(): GetOrderByIdResult {
  throw new NotImplementedError()
}

export interface DeleteOrderArgs<Req, Res> {
  parameters: paths['/store/order/{orderId}']['delete']['parameters'];
  requestBody: paths['/store/order/{orderId}']['delete']['requestBody'];
  req: Req;
  res: Res;
}

interface DeleteOrderResult_400 {
  content: { 400: paths['/store/order/{orderId}']['delete']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface DeleteOrderResult_404 {
  content: { 404: paths['/store/order/{orderId}']['delete']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type DeleteOrderResult = Promise<DeleteOrderResult_400 | DeleteOrderResult_404>;

export async function deleteOrder_unimplemented(): DeleteOrderResult {
  throw new NotImplementedError()
}

export interface CreateUserArgs<Req, Res> {
  parameters: paths['/user']['post']['parameters'];
  requestBody: paths['/user']['post']['requestBody'];
  req: Req;
  res: Res;
}

interface CreateUserResult_default {
  content: { default: paths['/user']['post']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type CreateUserResult = Promise<CreateUserResult_default>;

export async function createUser_unimplemented(): CreateUserResult {
  throw new NotImplementedError()
}

export interface CreateUsersWithListInputArgs<Req, Res> {
  parameters: paths['/user/createWithList']['post']['parameters'];
  requestBody: paths['/user/createWithList']['post']['requestBody'];
  req: Req;
  res: Res;
}

interface CreateUsersWithListInputResult_200 {
  content: { 200: paths['/user/createWithList']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface CreateUsersWithListInputResult_default {
  content: { default: paths['/user/createWithList']['post']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type CreateUsersWithListInputResult = Promise<CreateUsersWithListInputResult_200 | CreateUsersWithListInputResult_default>;

export async function createUsersWithListInput_unimplemented(): CreateUsersWithListInputResult {
  throw new NotImplementedError()
}

export interface LoginUserArgs<Req, Res> {
  parameters: paths['/user/login']['get']['parameters'];
  requestBody: paths['/user/login']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface LoginUserResult_200 {
  content: { 200: paths['/user/login']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface LoginUserResult_400 {
  content: { 400: paths['/user/login']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type LoginUserResult = Promise<LoginUserResult_200 | LoginUserResult_400>;

export async function loginUser_unimplemented(): LoginUserResult {
  throw new NotImplementedError()
}

export interface LogoutUserArgs<Req, Res> {
  parameters: paths['/user/logout']['get']['parameters'];
  requestBody: paths['/user/logout']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface LogoutUserResult_default {
  content: { default: paths['/user/logout']['get']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type LogoutUserResult = Promise<LogoutUserResult_default>;

export async function logoutUser_unimplemented(): LogoutUserResult {
  throw new NotImplementedError()
}

export interface GetUserByNameArgs<Req, Res> {
  parameters: paths['/user/{username}']['get']['parameters'];
  requestBody: paths['/user/{username}']['get']['requestBody'];
  req: Req;
  res: Res;
}

interface GetUserByNameResult_200 {
  content: { 200: paths['/user/{username}']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface GetUserByNameResult_400 {
  content: { 400: paths['/user/{username}']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface GetUserByNameResult_404 {
  content: { 404: paths['/user/{username}']['get']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type GetUserByNameResult = Promise<GetUserByNameResult_200 | GetUserByNameResult_400 | GetUserByNameResult_404>;

export async function getUserByName_unimplemented(): GetUserByNameResult {
  throw new NotImplementedError()
}

export interface UpdateUserArgs<Req, Res> {
  parameters: paths['/user/{username}']['put']['parameters'];
  requestBody: paths['/user/{username}']['put']['requestBody'];
  req: Req;
  res: Res;
}

interface UpdateUserResult_default {
  content: { default: paths['/user/{username}']['put']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type UpdateUserResult = Promise<UpdateUserResult_default>;

export async function updateUser_unimplemented(): UpdateUserResult {
  throw new NotImplementedError()
}

export interface DeleteUserArgs<Req, Res> {
  parameters: paths['/user/{username}']['delete']['parameters'];
  requestBody: paths['/user/{username}']['delete']['requestBody'];
  req: Req;
  res: Res;
}

interface DeleteUserResult_400 {
  content: { 400: paths['/user/{username}']['delete']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface DeleteUserResult_404 {
  content: { 404: paths['/user/{username}']['delete']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type DeleteUserResult = Promise<DeleteUserResult_400 | DeleteUserResult_404>;

export async function deleteUser_unimplemented(): DeleteUserResult {
  throw new NotImplementedError()
}

export interface Server<Req = unknown, Res = unknown> {
  updatePet: (
    args: UpdatePetArgs<Req, Res>
  ) => UpdatePetResult;
  addPet: (
    args: AddPetArgs<Req, Res>
  ) => AddPetResult;
  findPetsByStatus: (
    args: FindPetsByStatusArgs<Req, Res>
  ) => FindPetsByStatusResult;
  findPetsByTags: (
    args: FindPetsByTagsArgs<Req, Res>
  ) => FindPetsByTagsResult;
  getPetById: (
    args: GetPetByIdArgs<Req, Res>
  ) => GetPetByIdResult;
  updatePetWithForm: (
    args: UpdatePetWithFormArgs<Req, Res>
  ) => UpdatePetWithFormResult;
  deletePet: (
    args: DeletePetArgs<Req, Res>
  ) => DeletePetResult;
  uploadFile: (
    args: UploadFileArgs<Req, Res>
  ) => UploadFileResult;
  getInventory: (
    args: GetInventoryArgs<Req, Res>
  ) => GetInventoryResult;
  placeOrder: (
    args: PlaceOrderArgs<Req, Res>
  ) => PlaceOrderResult;
  getOrderById: (
    args: GetOrderByIdArgs<Req, Res>
  ) => GetOrderByIdResult;
  deleteOrder: (
    args: DeleteOrderArgs<Req, Res>
  ) => DeleteOrderResult;
  createUser: (
    args: CreateUserArgs<Req, Res>
  ) => CreateUserResult;
  createUsersWithListInput: (
    args: CreateUsersWithListInputArgs<Req, Res>
  ) => CreateUsersWithListInputResult;
  loginUser: (
    args: LoginUserArgs<Req, Res>
  ) => LoginUserResult;
  logoutUser: (
    args: LogoutUserArgs<Req, Res>
  ) => LogoutUserResult;
  getUserByName: (
    args: GetUserByNameArgs<Req, Res>
  ) => GetUserByNameResult;
  updateUser: (
    args: UpdateUserArgs<Req, Res>
  ) => UpdateUserResult;
  deleteUser: (
    args: DeleteUserArgs<Req, Res>
  ) => DeleteUserResult;
}

export function registerRouteHandlers<Req, Res>(server: Server<Req, Res>): Route[] {
  return [
    {
      method: "put",
      path: "/pet",
      handler: server.updatePet,
    },
    {
      method: "post",
      path: "/pet",
      handler: server.addPet,
    },
    {
      method: "get",
      path: "/pet/findByStatus",
      handler: server.findPetsByStatus,
    },
    {
      method: "get",
      path: "/pet/findByTags",
      handler: server.findPetsByTags,
    },
    {
      method: "get",
      path: "/pet/{petId}",
      handler: server.getPetById,
    },
    {
      method: "post",
      path: "/pet/{petId}",
      handler: server.updatePetWithForm,
    },
    {
      method: "delete",
      path: "/pet/{petId}",
      handler: server.deletePet,
    },
    {
      method: "post",
      path: "/pet/{petId}/uploadImage",
      handler: server.uploadFile,
    },
    {
      method: "get",
      path: "/store/inventory",
      handler: server.getInventory,
    },
    {
      method: "post",
      path: "/store/order",
      handler: server.placeOrder,
    },
    {
      method: "get",
      path: "/store/order/{orderId}",
      handler: server.getOrderById,
    },
    {
      method: "delete",
      path: "/store/order/{orderId}",
      handler: server.deleteOrder,
    },
    {
      method: "post",
      path: "/user",
      handler: server.createUser,
    },
    {
      method: "post",
      path: "/user/createWithList",
      handler: server.createUsersWithListInput,
    },
    {
      method: "get",
      path: "/user/login",
      handler: server.loginUser,
    },
    {
      method: "get",
      path: "/user/logout",
      handler: server.logoutUser,
    },
    {
      method: "get",
      path: "/user/{username}",
      handler: server.getUserByName,
    },
    {
      method: "put",
      path: "/user/{username}",
      handler: server.updateUser,
    },
    {
      method: "delete",
      path: "/user/{username}",
      handler: server.deleteUser,
    },
  ]
}
