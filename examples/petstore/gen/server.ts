/**
 * This file was auto-generated by openapi-typescript-server@0.0.9.
 * Do not make direct changes to the file.
 */

import type { paths } from "./schema.d.ts";
import type { Route } from "openapi-typescript-server-runtime";
import { NotImplementedError } from "openapi-typescript-server-runtime";

export interface UpdatePetArgs<Req, Res> {
  parameters: paths['/pet']['put']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content: paths['/pet']['put']['requestBody']['content']['application/json']
  }
  | {
    mediaType: "application/xml";
    content: paths['/pet']['put']['requestBody']['content']['application/xml']
  }
  | {
    mediaType: "application/x-www-form-urlencoded";
    content: paths['/pet']['put']['requestBody']['content']['application/x-www-form-urlencoded']
  }
  ;
}

interface UpdatePetResult200 {
  content: { 200: paths['/pet']['put']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface UpdatePetResult400 {
  content: { 400: paths['/pet']['put']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface UpdatePetResult404 {
  content: { 404: paths['/pet']['put']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

interface UpdatePetResult405 {
  content: { 405: paths['/pet']['put']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type UpdatePetResult = Promise<UpdatePetResult200 | UpdatePetResult400 | UpdatePetResult404 | UpdatePetResult405>;

export async function updatePetUnimplemented(): UpdatePetResult {
  throw new NotImplementedError()
}

export interface AddPetArgs<Req, Res> {
  parameters: paths['/pet']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content: paths['/pet']['post']['requestBody']['content']['application/json']
  }
  | {
    mediaType: "application/xml";
    content: paths['/pet']['post']['requestBody']['content']['application/xml']
  }
  | {
    mediaType: "application/x-www-form-urlencoded";
    content: paths['/pet']['post']['requestBody']['content']['application/x-www-form-urlencoded']
  }
  ;
}

interface AddPetResult200 {
  content: { 200: paths['/pet']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface AddPetResult405 {
  content: { 405: paths['/pet']['post']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type AddPetResult = Promise<AddPetResult200 | AddPetResult405>;

export async function addPetUnimplemented(): AddPetResult {
  throw new NotImplementedError()
}

export interface FindPetsByStatusArgs<Req, Res> {
  parameters: paths['/pet/findByStatus']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface FindPetsByStatusResult200 {
  content: { 200: paths['/pet/findByStatus']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface FindPetsByStatusResult400 {
  content: { 400: paths['/pet/findByStatus']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type FindPetsByStatusResult = Promise<FindPetsByStatusResult200 | FindPetsByStatusResult400>;

export async function findPetsByStatusUnimplemented(): FindPetsByStatusResult {
  throw new NotImplementedError()
}

export interface FindPetsByTagsArgs<Req, Res> {
  parameters: paths['/pet/findByTags']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface FindPetsByTagsResult200 {
  content: { 200: paths['/pet/findByTags']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface FindPetsByTagsResult400 {
  content: { 400: paths['/pet/findByTags']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type FindPetsByTagsResult = Promise<FindPetsByTagsResult200 | FindPetsByTagsResult400>;

export async function findPetsByTagsUnimplemented(): FindPetsByTagsResult {
  throw new NotImplementedError()
}

export interface GetPetByIdArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface GetPetByIdResult200 {
  content: { 200: paths['/pet/{petId}']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface GetPetByIdResult400 {
  content: { 400: paths['/pet/{petId}']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface GetPetByIdResult404 {
  content: { 404: paths['/pet/{petId}']['get']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type GetPetByIdResult = Promise<GetPetByIdResult200 | GetPetByIdResult400 | GetPetByIdResult404>;

export async function getPetByIdUnimplemented(): GetPetByIdResult {
  throw new NotImplementedError()
}

export interface UpdatePetWithFormArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface UpdatePetWithFormResult405 {
  content: { 405: paths['/pet/{petId}']['post']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type UpdatePetWithFormResult = Promise<UpdatePetWithFormResult405>;

export async function updatePetWithFormUnimplemented(): UpdatePetWithFormResult {
  throw new NotImplementedError()
}

export interface DeletePetArgs<Req, Res> {
  parameters: paths['/pet/{petId}']['delete']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface DeletePetResult400 {
  content: { 400: paths['/pet/{petId}']['delete']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type DeletePetResult = Promise<DeletePetResult400>;

export async function deletePetUnimplemented(): DeletePetResult {
  throw new NotImplementedError()
}

export interface UploadFileArgs<Req, Res> {
  parameters: paths['/pet/{petId}/uploadImage']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/octet-stream";
    content?: NonNullable<paths['/pet/{petId}/uploadImage']['post']['requestBody']>['content']['application/octet-stream']
  }
  ;
}

interface UploadFileResult200 {
  content: { 200: paths['/pet/{petId}/uploadImage']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

export type UploadFileResult = Promise<UploadFileResult200>;

export async function uploadFileUnimplemented(): UploadFileResult {
  throw new NotImplementedError()
}

export interface GetInventoryArgs<Req, Res> {
  parameters: paths['/store/inventory']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface GetInventoryResult200 {
  content: { 200: paths['/store/inventory']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

export type GetInventoryResult = Promise<GetInventoryResult200>;

export async function getInventoryUnimplemented(): GetInventoryResult {
  throw new NotImplementedError()
}

export interface PlaceOrderArgs<Req, Res> {
  parameters: paths['/store/order']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content?: NonNullable<paths['/store/order']['post']['requestBody']>['content']['application/json']
  }
  | {
    mediaType: "application/xml";
    content?: NonNullable<paths['/store/order']['post']['requestBody']>['content']['application/xml']
  }
  | {
    mediaType: "application/x-www-form-urlencoded";
    content?: NonNullable<paths['/store/order']['post']['requestBody']>['content']['application/x-www-form-urlencoded']
  }
  ;
}

interface PlaceOrderResult200 {
  content: { 200: paths['/store/order']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface PlaceOrderResult405 {
  content: { 405: paths['/store/order']['post']['responses']['405']['content'] };
  headers?: { [name: string]: any };
}

export type PlaceOrderResult = Promise<PlaceOrderResult200 | PlaceOrderResult405>;

export async function placeOrderUnimplemented(): PlaceOrderResult {
  throw new NotImplementedError()
}

export interface GetOrderByIdArgs<Req, Res> {
  parameters: paths['/store/order/{orderId}']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface GetOrderByIdResult200 {
  content: { 200: paths['/store/order/{orderId}']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface GetOrderByIdResult400 {
  content: { 400: paths['/store/order/{orderId}']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface GetOrderByIdResult404 {
  content: { 404: paths['/store/order/{orderId}']['get']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type GetOrderByIdResult = Promise<GetOrderByIdResult200 | GetOrderByIdResult400 | GetOrderByIdResult404>;

export async function getOrderByIdUnimplemented(): GetOrderByIdResult {
  throw new NotImplementedError()
}

export interface DeleteOrderArgs<Req, Res> {
  parameters: paths['/store/order/{orderId}']['delete']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface DeleteOrderResult400 {
  content: { 400: paths['/store/order/{orderId}']['delete']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface DeleteOrderResult404 {
  content: { 404: paths['/store/order/{orderId}']['delete']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type DeleteOrderResult = Promise<DeleteOrderResult400 | DeleteOrderResult404>;

export async function deleteOrderUnimplemented(): DeleteOrderResult {
  throw new NotImplementedError()
}

export interface CreateUserArgs<Req, Res> {
  parameters: paths['/user']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content?: NonNullable<paths['/user']['post']['requestBody']>['content']['application/json']
  }
  | {
    mediaType: "application/xml";
    content?: NonNullable<paths['/user']['post']['requestBody']>['content']['application/xml']
  }
  | {
    mediaType: "application/x-www-form-urlencoded";
    content?: NonNullable<paths['/user']['post']['requestBody']>['content']['application/x-www-form-urlencoded']
  }
  ;
}

interface CreateUserResultDefault {
  content: { default: paths['/user']['post']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type CreateUserResult = Promise<CreateUserResultDefault>;

export async function createUserUnimplemented(): CreateUserResult {
  throw new NotImplementedError()
}

export interface CreateUsersWithListInputArgs<Req, Res> {
  parameters: paths['/user/createWithList']['post']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content?: NonNullable<paths['/user/createWithList']['post']['requestBody']>['content']['application/json']
  }
  ;
}

interface CreateUsersWithListInputResult200 {
  content: { 200: paths['/user/createWithList']['post']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface CreateUsersWithListInputResultDefault {
  content: { default: paths['/user/createWithList']['post']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type CreateUsersWithListInputResult = Promise<CreateUsersWithListInputResult200 | CreateUsersWithListInputResultDefault>;

export async function createUsersWithListInputUnimplemented(): CreateUsersWithListInputResult {
  throw new NotImplementedError()
}

export interface LoginUserArgs<Req, Res> {
  parameters: paths['/user/login']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface LoginUserResult200 {
  content: { 200: paths['/user/login']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface LoginUserResult400 {
  content: { 400: paths['/user/login']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

export type LoginUserResult = Promise<LoginUserResult200 | LoginUserResult400>;

export async function loginUserUnimplemented(): LoginUserResult {
  throw new NotImplementedError()
}

export interface LogoutUserArgs<Req, Res> {
  parameters: paths['/user/logout']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface LogoutUserResultDefault {
  content: { default: paths['/user/logout']['get']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type LogoutUserResult = Promise<LogoutUserResultDefault>;

export async function logoutUserUnimplemented(): LogoutUserResult {
  throw new NotImplementedError()
}

export interface GetUserByNameArgs<Req, Res> {
  parameters: paths['/user/{username}']['get']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface GetUserByNameResult200 {
  content: { 200: paths['/user/{username}']['get']['responses']['200']['content'] };
  headers?: { [name: string]: any };
}

interface GetUserByNameResult400 {
  content: { 400: paths['/user/{username}']['get']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface GetUserByNameResult404 {
  content: { 404: paths['/user/{username}']['get']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type GetUserByNameResult = Promise<GetUserByNameResult200 | GetUserByNameResult400 | GetUserByNameResult404>;

export async function getUserByNameUnimplemented(): GetUserByNameResult {
  throw new NotImplementedError()
}

export interface UpdateUserArgs<Req, Res> {
  parameters: paths['/user/{username}']['put']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
  requestBody: {
    mediaType: "application/json";
    content?: NonNullable<paths['/user/{username}']['put']['requestBody']>['content']['application/json']
  }
  | {
    mediaType: "application/xml";
    content?: NonNullable<paths['/user/{username}']['put']['requestBody']>['content']['application/xml']
  }
  | {
    mediaType: "application/x-www-form-urlencoded";
    content?: NonNullable<paths['/user/{username}']['put']['requestBody']>['content']['application/x-www-form-urlencoded']
  }
  ;
}

interface UpdateUserResultDefault {
  content: { default: paths['/user/{username}']['put']['responses']['default']['content'] };
  headers?: { [name: string]: any };
  status: number;
}

export type UpdateUserResult = Promise<UpdateUserResultDefault>;

export async function updateUserUnimplemented(): UpdateUserResult {
  throw new NotImplementedError()
}

export interface DeleteUserArgs<Req, Res> {
  parameters: paths['/user/{username}']['delete']['parameters'];
  contentType: string;
  req: Req;
  res: Res;
}

interface DeleteUserResult400 {
  content: { 400: paths['/user/{username}']['delete']['responses']['400']['content'] };
  headers?: { [name: string]: any };
}

interface DeleteUserResult404 {
  content: { 404: paths['/user/{username}']['delete']['responses']['404']['content'] };
  headers?: { [name: string]: any };
}

export type DeleteUserResult = Promise<DeleteUserResult400 | DeleteUserResult404>;

export async function deleteUserUnimplemented(): DeleteUserResult {
  throw new NotImplementedError()
}

export interface Server<Req = unknown, Res = unknown> {
  /**
   * Update an existing pet
   *
   * @description Update an existing pet by Id
   */
  updatePet: (
    args: UpdatePetArgs<Req, Res>
  ) => UpdatePetResult;
  /**
   * Add a new pet to the store
   *
   * @description Add a new pet to the store
   */
  addPet: (
    args: AddPetArgs<Req, Res>
  ) => AddPetResult;
  /**
   * Finds Pets by status
   *
   * @description Multiple status values can be provided with comma separated strings
   */
  findPetsByStatus: (
    args: FindPetsByStatusArgs<Req, Res>
  ) => FindPetsByStatusResult;
  /**
   * Finds Pets by tags
   *
   * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   */
  findPetsByTags: (
    args: FindPetsByTagsArgs<Req, Res>
  ) => FindPetsByTagsResult;
  /**
   * Find pet by ID
   *
   * @description Returns a single pet
   */
  getPetById: (
    args: GetPetByIdArgs<Req, Res>
  ) => GetPetByIdResult;
  /** Updates a pet in the store with form data */
  updatePetWithForm: (
    args: UpdatePetWithFormArgs<Req, Res>
  ) => UpdatePetWithFormResult;
  /** Deletes a pet */
  deletePet: (
    args: DeletePetArgs<Req, Res>
  ) => DeletePetResult;
  /** uploads an image */
  uploadFile: (
    args: UploadFileArgs<Req, Res>
  ) => UploadFileResult;
  /**
   * Returns pet inventories by status
   *
   * @description Returns a map of status codes to quantities
   */
  getInventory: (
    args: GetInventoryArgs<Req, Res>
  ) => GetInventoryResult;
  /**
   * Place an order for a pet
   *
   * @description Place a new order in the store
   */
  placeOrder: (
    args: PlaceOrderArgs<Req, Res>
  ) => PlaceOrderResult;
  /**
   * Find purchase order by ID
   *
   * @description For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   */
  getOrderById: (
    args: GetOrderByIdArgs<Req, Res>
  ) => GetOrderByIdResult;
  /**
   * Delete purchase order by ID
   *
   * @description For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
   */
  deleteOrder: (
    args: DeleteOrderArgs<Req, Res>
  ) => DeleteOrderResult;
  /**
   * Create user
   *
   * @description This can only be done by the logged in user.
   */
  createUser: (
    args: CreateUserArgs<Req, Res>
  ) => CreateUserResult;
  /**
   * Creates list of users with given input array
   *
   * @description Creates list of users with given input array
   */
  createUsersWithListInput: (
    args: CreateUsersWithListInputArgs<Req, Res>
  ) => CreateUsersWithListInputResult;
  /** Logs user into the system */
  loginUser: (
    args: LoginUserArgs<Req, Res>
  ) => LoginUserResult;
  /** Logs out current logged in user session */
  logoutUser: (
    args: LogoutUserArgs<Req, Res>
  ) => LogoutUserResult;
  /** Get user by user name */
  getUserByName: (
    args: GetUserByNameArgs<Req, Res>
  ) => GetUserByNameResult;
  /**
   * Update user
   *
   * @description This can only be done by the logged in user.
   */
  updateUser: (
    args: UpdateUserArgs<Req, Res>
  ) => UpdateUserResult;
  /**
   * Delete user
   *
   * @description This can only be done by the logged in user.
   */
  deleteUser: (
    args: DeleteUserArgs<Req, Res>
  ) => DeleteUserResult;
}

export function registerRouteHandlers<Req, Res>(server: Server<Req, Res>): Route[] {
  return [
    {
      method: "put",
      path: "/pet",
      handler: server.updatePet as Route["handler"],
    },
    {
      method: "post",
      path: "/pet",
      handler: server.addPet as Route["handler"],
    },
    {
      method: "get",
      path: "/pet/findByStatus",
      handler: server.findPetsByStatus as Route["handler"],
    },
    {
      method: "get",
      path: "/pet/findByTags",
      handler: server.findPetsByTags as Route["handler"],
    },
    {
      method: "get",
      path: "/pet/{petId}",
      handler: server.getPetById as Route["handler"],
    },
    {
      method: "post",
      path: "/pet/{petId}",
      handler: server.updatePetWithForm as Route["handler"],
    },
    {
      method: "delete",
      path: "/pet/{petId}",
      handler: server.deletePet as Route["handler"],
    },
    {
      method: "post",
      path: "/pet/{petId}/uploadImage",
      handler: server.uploadFile as Route["handler"],
    },
    {
      method: "get",
      path: "/store/inventory",
      handler: server.getInventory as Route["handler"],
    },
    {
      method: "post",
      path: "/store/order",
      handler: server.placeOrder as Route["handler"],
    },
    {
      method: "get",
      path: "/store/order/{orderId}",
      handler: server.getOrderById as Route["handler"],
    },
    {
      method: "delete",
      path: "/store/order/{orderId}",
      handler: server.deleteOrder as Route["handler"],
    },
    {
      method: "post",
      path: "/user",
      handler: server.createUser as Route["handler"],
    },
    {
      method: "post",
      path: "/user/createWithList",
      handler: server.createUsersWithListInput as Route["handler"],
    },
    {
      method: "get",
      path: "/user/login",
      handler: server.loginUser as Route["handler"],
    },
    {
      method: "get",
      path: "/user/logout",
      handler: server.logoutUser as Route["handler"],
    },
    {
      method: "get",
      path: "/user/{username}",
      handler: server.getUserByName as Route["handler"],
    },
    {
      method: "put",
      path: "/user/{username}",
      handler: server.updateUser as Route["handler"],
    },
    {
      method: "delete",
      path: "/user/{username}",
      handler: server.deleteUser as Route["handler"],
    },
  ]
}
